//Longest Increasing Subsequenc

class ArrayProblems{

    public static int f(int ind, int prev_ind, int arr[], int n){
        
        if(ind==n) return 0;

        int len = f(ind+1, prev_ind, arr, n);
        if(prev_ind==-1 || arr[ind]>arr[prev_ind]){
            len = Math.max(len,1+f(ind+1, ind, arr, n));
        }
        return len;
    }

    public static void main(String[] args) {
        int arr[] = {1,5,4,1,4,8,9,10};
        System.out.print(f(0,-1,arr,arr.length));
    }  
}


class ArrayProblems{

    public static int f(int ind, int prev_ind, int arr[], int n, int dp[][]){
        
        if(ind==n) return 0;
        
        if(dp[ind][prev_ind+1]!=-1) return dp[ind][prev_ind+1];
        
        int len = f(ind+1, prev_ind, arr, n);
        if(prev_ind==-1 || arr[ind]>arr[prev_ind]){
            len = Math.max(len,1+f(ind+1, ind, arr, n));
        }
        
        return dp[ind][prev_ind+1]=len;
    }

    public static void main(String[] args) {
        int arr[] = {1,5,4,1,4,8,9,10};
        System.out.print(f(0,-1,arr,arr.length));
    }  
}
