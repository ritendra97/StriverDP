public class DynamicPrograming {

    public static int Helper(int points[][], int day, int last){

        if(day==0){

            int max = Integer.MIN_VALUE;
            for(int task = 0;task<3;task++){

                if(task!=last){
                    max = Math.max(max,points[0][task]);
                }
            }
            return max;
        }

        int max = Integer.MIN_VALUE;

        for(int task = 0;task<3;task++){
            if(task!=last){
                int point = points[day][task]+Helper(points,day-1,task);
                max = Math.max(max,point);
            }
        }
        return max;
    }

    public static int ninjaTraining(int arr[][]){
        int n = arr.length;
        return Helper(arr,n-1,3);
    }

    public static void main(String[] args) {

        int arr[][] = {{1,2,5},
                       {3,1,1},
                       {3,3,3}};

        System.out.println(ninjaTraining(arr));
    }
}

public class DynamicPrograming {

    public static int Helper(int points[][], int day, int last, int dp[][]){

        if(day==0){

            int max = Integer.MIN_VALUE;
            for(int task = 0;task<3;task++){

                if(task!=last){
                    max = Math.max(max,points[0][task]);
                }
            }
            return max;
        }

        if(dp[day][last]!=-1) return dp[day][last];

        int max = Integer.MIN_VALUE;

        for(int task = 0;task<3;task++){
            if(task!=last){
                int point = points[day][task]+Helper(points,day-1,task,dp);
                max = Math.max(max,point);
            }
        }
        return dp[day][last] = max;
    }

    public static int ninjaTraining(int arr[][]){
        int n = arr.length;
        int m = arr[0].length;

        int dp[][] = new int[n][m];
        return Helper(arr,n-1,3,dp);
    }

    public static void main(String[] args) {

        int arr[][] = {{1,2,5},
                       {3,1,1},
                       {3,3,3}};

        System.out.println(ninjaTraining(arr));
    }
}




